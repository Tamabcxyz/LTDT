#include<stdio.h>
int mark[100];
int parent[100];
// tao ds
typedef struct{
	int data[100];
	int size;	
}List;
// khoi tao ds rong
void make_null_list(List* L){
	L->size=0;
}
// them ptu vao cuoi ds
void push_back(List* L, int x){
	L->data[L->size]=x;
	L->size++;
}
// lay ptu o vi tri i
int element_at(List* L, int i){
	return L->data[i-1];
}
// tra ve so ptu cua ds
int count_list(List* L){
	return L->size;
}
// cau truc do thi
typedef struct{
	int n; // dinh cua do thi
	List adj[100]; // chua ds cac dinh ke
}Graph;
// khoi tao do thi co n dinh
void init_graph(Graph* G, int n){
	G->n=n;
	int i;
	for(i=1;i<=G->n;i++){
		make_null_list(&G->adj[i]);
	}
}
// them cung vao do thi dung trong truong ho do thi voi huong
void add_edge1(Graph* G, int x, int y){
	push_back(&G->adj[x],y); // y ke voi x
	push_back(&G->adj[y],x); // x ke voi y
}
// them cung dung trong truong hop do thi co huong
void add_edge2(Graph* G, int x, int y){
	push_back(&G->adj[x],y);// chi co y ke voi x
}
// kiem tra dinh y co ke dinh x?
int adjacent(Graph* G, int x, int y){
	int i;
	for(i=1;i<=G->adj[x].size;i++){
		if(element_at(&G->adj[x],i)==y){
			return 1;
		}
	}
	return 0;
}
// danh sach cac dinh ke
List neighbors(Graph* G, int x){
	List list;
	make_null_list(&list);
	int i;
	for(i=1;i<=G->n;i++){
		if(adjacent(G,x,i)){
			push_back(&list,i);
		}
	}
	return list;
}
// bac cua dinh x
int degree(Graph* G, int x){
	return G->adj[x].size;
}

// cau truc hang doi
typedef struct{
	int A[100];
	int front, rear;
}Queue;
// khoi tao hang doi
void make_null_queue(Queue* Q){
	Q->front=0;
	Q->rear=-1;
}
// them ptu vao cuoi hang doi
void push(Queue* Q, int x){
	Q->rear++;
	Q->A[Q->rear]=x;
}
// lay ptu o dau hang doi
int top(Queue* Q){
	return Q->A[Q->front];
}
// lay ptu ra o vi tri dau
int pop(Queue* Q){
	Q->front++;
}
// kiem tra hang doi rong
int empty(Queue* Q){
	return Q->front>Q->rear;
}
void breath_first_search(Graph* G, int k) {
	Queue L;
	make_null_queue(&L);
	int j;
	push(&L, k);
	while (!empty(&L)) {
		int x = top(&L); pop(&L);
		mark[x] = 1; 
		List list = neighbors(G, x);
		for (j = 1; j <= list.size; j++) {
			int y = element_at(&list, j);
			if(mark[y]==0){
				mark[y]=1;
				parent[y]=x;
				push(&L,y);
			}
		}
	}
}
int main(){
	Graph G;
	int n, m, u, v, e, j;
	scanf("%d%d", &n, &m);
	init_graph(&G, n);
	
	for (e = 1; e <= m; e++) {
		scanf("%d%d", &u, &v);
		add_edge1(&G, u, v);
	}
	for (j = 1; j <= n; j++){
		if (mark[j] == 0)
			breath_first_search(&G, j);
	}
	for(j=1;j<=n;j++){
		printf("cha cua %d la %d\n",j,parent[j]);
	}	
			
}
