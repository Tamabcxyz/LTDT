#include<stdio.h>
int mark[100];
// tao ds
typedef struct{
	int data[100];
	int size;	
}List;
// khoi tao ds rong
void make_null_list(List* L){
	L->size=0;
}
// them ptu vao cuoi ds
void push_back(List* L, int x){
	L->data[L->size]=x;
	L->size++;
}
// lay ptu o vi tri i
int element_at(List* L, int i){
	return L->data[i-1];
}
// tra ve so ptu cua ds
int count_list(List* L){
	return L->size;
}
// cau truc do thi
typedef struct{
	int n; // dinh cua do thi
	List adj[100]; // chua ds cac dinh ke
}Graph;
// khoi tao do thi co n dinh
void init_graph(Graph* G, int n){
	G->n=n;
	int i;
	for(i=1;i<=G->n;i++){
		make_null_list(&G->adj[i]);
	}
}
// them cung vao do thi dung trong truong ho do thi voi huong
void add_edge1(Graph* G, int x, int y){
	push_back(&G->adj[x],y); // y ke voi x
	push_back(&G->adj[y],x); // x ke voi y
}
// them cung dung trong truong hop do thi co huong
void add_edge2(Graph* G, int x, int y){
	push_back(&G->adj[x],y);// chi co y ke voi x
}
// kiem tra dinh y co ke dinh x?
int adjacent(Graph* G, int x, int y){
	int i;
	for(i=1;i<=G->adj[x].size;i++){
		if(element_at(&G->adj[x],i)==y){
			return 1;
		}
	}
	return 0;
}
// danh sach cac dinh ke
List neighbors(Graph* G, int x){
	List list;
	make_null_list(&list);
	int i;
	for(i=1;i<=G->n;i++){
		if(adjacent(G,x,i)){
			push_back(&list,i);
		}
	}
	return list;
}
// bac cua dinh x
int degree(Graph* G, int x){
	return G->adj[x].size;
}

// cau truc hang doi
typedef struct{
	int A[100];
	int size;
}Stack;
// khoi tao hang doi
void make_null_stack(Stack* S){
	S->size=0;
}
// them ptu vao cuoi hang doi
void push(Stack* S, int x){
	S->A[S->size]=x;
	S->size++;
}
// lay ptu o dau hang doi
int top(Stack* S){
	return S->A[S->size-1];
}
// lay ptu ra o vi tri dau
int pop(Stack* S){
	S->size--;
}
// kiem tra hang doi rong
int empty(Stack* S){
	return S->size==0;
}
// ham min cua 2 so
int min(int a, int b){
	return a<b? a:b;
}
// kiem tra do thi lien thong manh tai 1 diem
int num[100], min_num[100], on_stack[100],k;
Stack S;
int ltm[10]={0};int li=0,dem=0;
void strong_connect(Graph* G, int x){
	num[x]=min_num[x]=k;
	k++;
	push(&S,x);
	on_stack[x]=1;
	List list=neighbors(G,x);
	int j;
	for(j=1;j<=list.size;j++){
		int y=element_at(&list,j);
		if(num[y]<0){
			strong_connect(G,y);
			min_num[x]=min(min_num[x],min_num[y]);
		}else if(on_stack[y]){
			min_num[x]=min(min_num[x],num[y]);
		}
	}
	if(num[x]==min_num[x]){
		int w;
		do{
			w=top(&S);
			pop(&S);
			on_stack[w]=0;
		}while(w!=x);
		dem++;
	}
	
	
}
int main(){
	Graph G;
	int n,m,e,u,v;
	scanf("%d%d",&n,&m);
	init_graph(&G,n);
	for(e=1;e<=m;e++){
		scanf("%d%d",&u,&v);
		add_edge2(&G,u,v);
	}
	for(v=1;v<=n;v++){
		num[v]=-1;
		on_stack[v]=0;
	}
	k=1;
	make_null_stack(&S);
	for(v=1; v<=n; v++){
		if(num[v]==-1){
			strong_connect(&G,v);
		}
	}
	printf("%d",dem);
}
