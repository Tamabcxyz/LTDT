#include <stdio.h>
#define MAX 500
#define INFINITY 999
#define NO_EDGE -99
typedef struct{
	int n;
	int A[MAX][MAX];
}Graph;// cau truc do thi ma tran dinh dinh
// khoi tao do thi
void init_graph(Graph* G, int n){
	G->n=n;
	int i,j;
	for(i=1;i<=G->n;i++){
		for(j=1;j<=G->n;j++){
			G->A[i][j]=0;
		}
	}
}
// them cung vao do thi
void add_edge(Graph* G, int x, int y, int w){
	G->A[x][y]=w;
}
// tinh bac cua dinh x
int degree(Graph* G, int x){
	int i,deg=0;
	for(i=1;i<=G->n;i++){
		if(G->A[x][i]!=0){
			deg++;
		}
	}
	return deg;
}

int mark[MAX];
int pi[MAX];
int p[MAX];
// tim duong di ngan nhat giai thuat Dijkstra
void Dijkstra(Graph* G, int s){
	int e,i,j;
	for(e=1;e<=G->n;e++){
		pi[e]=INFINITY;
		mark[e]=0;
	}
	pi[s]=0;
	p[s]=-1;
	
	for(i=1;i<=G->n;i++){
		int min_pi=INFINITY;
		for(j=1;j<=G->n;j++){
			if((mark[j]==0)&&(pi[j]<min_pi)){
				min_pi=pi[j];
				i=j;
			}
		}
		mark[i]=1;
		for(j=1;j<=G->n;j++){
			if((G->A[i][j]!=0)&&(mark[j]==0)){
				if((pi[i]+G->A[i][j])<pi[j]){
					pi[j]=pi[i]+G->A[i][j];
					p[j]=i;
				}
			}
		}
	}
}
int main(){
	Graph G;
	int n,m,x,y,w,i,j;
	scanf("%d%d",&n,&m);
	init_graph(&G,n);
	for(i=0;i<m;i++){
		scanf("%d%d%d",&x,&y,&w);
		add_edge(&G,x,y,w);
	}
	Dijkstra(&G,1);

	if(pi[n]==INFINITY) {
		printf("-1");
	}
	else{
		for(i=1;i<=G.n;i++){
			if(p[i]==p[n]){
				printf("%d",pi[n]);
				break;
			}
		}

	}
	return 0;
}
