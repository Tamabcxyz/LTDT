//KT tinh lien thong manh
#include<stdio.h>
#define MAX_ELEMENT 100
#define MAX_ELEMENTS 100
#define MAX_VERTICES 100
// cai dat cau truc ngan xep
typedef struct{
	int data[MAX_ELEMENTS];
	int size;
}Stack;
// khoi tao stack rong
void make_null_stack(Stack* s){
	s->size=0;
}
// kiem tra ngan xep co rong ko
int empty(Stack* s){
	return s->size==0;
}
// them phan tu vao ngan xep
void push(Stack* s, int x){
	s->data[s->size]=x;
	s->size++;
}
// tra ve ptu top trong stack
int top(Stack* s){
	return s->data[(s->size)-1];
}
// xoa phan tu tai vi tri top
void pop(Stack* s){
	s->size--;
}
typedef int ElementType;
// tao cau truc danh sach
typedef struct{
	ElementType data[MAX_ELEMENTS];
	int size;
}List;
// tao danh sach rong
void make_null_list(List* L){
	L->size=0;
}
// them ptu vao cuoi danh sach
void push_back(List* L, int x){
	L->data[L->size]=x;
	L->size++;
}
// lay ptu bat ki tai 1 vi tri trong danh sach
ElementType element_at(List* L, int i){
	return L->data[i-1];
}
// so ptu cua danh sach
int count_list(List* L){
	return L->size;
}
// kiem tra danh sach rong
int empty_list(List* L){
	return L->size==0;
}


typedef struct{
	int n;
	int A[100][100];
	int mark[100];
} Graph;



void init_graph(Graph* G, int n){
	int i,j;
	G->n=n;
	for (i=1;i<=n;i++)
		for (j=1;j<=n;j++)
			G->A[i][j]=0;
}

void add_edge(Graph* G, int x, int y){
	G->A[x][y]=1;
	G->A[y][x]=1;
}
void add_edge2(Graph* G, int x, int y){
	G->A[x][y]=1;
}

int adjacent(Graph* G, int x, int y){
	return G->A[x][y] != 0;
}

int degree(Graph* G, int x){
	int y, deg=0;
	for (y=1; y<=G->n;y++)
		if (G->A[x][y]>0)
			deg+=G->A[x][y];
	return deg;
}
List neighbors(Graph *G, int x){
	int y;
	List list;
	make_null_list(&list);
	for(y=1;y<=G->n;y++)
		if(adjacent(G,x,y))
			push_back(&list,y);
	return list;
}
int num[MAX_VERTICES], min_num[MAX_VERTICES],on_stack[MAX_VERTICES], k;
	int ltm[10]={0}, li=0;
	Stack S;
int min(int a, int b){
	if(a>b)
		return b;
	else
		return a;	
}	
//Duyet do thi bat dau tu dinh
void strong_connect(Graph *G, int x){
	num[x] = min_num[x] = k; k++;
	push(&S,x); //Dua x vao stack
	on_stack[x] = 1; //x dang o tren stack
	// Lay cac dinh ke va duyet no
	List list = neighbors(G,x);
	int j;
	for(j=1; j<=list.size; j++) {
		int y = element_at(&list, j);
		if(num[y]<0){
			strong_connect(G,y);
			min_num[x] = min(min_num[x], min_num[y]);
		} else if (on_stack[y])
			min_num[x] = min(min_num[x], num[y]); 
	} 
	//printf("min_num[%d] = %d\n", x, min_num[x]);
	if (num[x] == min_num[x]){
	//	printf("%d la dinh khop. \n", x);
		int w;
		do{
			w = top(&S);
			pop(&S); ltm[li]++;
			on_stack[w] = 0;
		} 
		while (w != x);
		li++;
	}
}
int main(){
	Graph G;
	int n, m, e, u, v, q;
	scanf("%d%d", &n, &m);
	init_graph(&G,n);
	
	 for(e = 0; e <m; e++) {
		scanf("%d%d%d",&u,&v,&q);
	     if(q==2){
			add_edge(&G,u,v);
		}else{
			add_edge2(&G,u,v);	
		}
	}
	for(v=1;v<=n;v++){
		num[v]=-1;
		on_stack[v]=0;
	}
	k=1;
	for(v=1;v<=n;v++){
		if(num[v]==-1)
			strong_connect(&G,v);
	}
	if(ltm[0]==n)
		printf("OKIE");	
	else
		printf("NO");
		
}
