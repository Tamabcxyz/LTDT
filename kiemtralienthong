
#include <stdio.h>
#define MAX 100
#define white 0
#define gray 2
#define black 1
// tao ds
typedef struct{
	int data[100];
	int size;	
}List;
// khoi tao ds rong
void make_null_list(List* L){
	L->size=0;
}
// them ptu vao cuoi ds
void push_back(List* L, int x){
	L->data[L->size]=x;
	L->size++;
}
// lay ptu o vi tri i
int element_at(List* L, int i){
	return L->data[i-1];
}
// tra ve so ptu cua ds
int count_list(List* L){
	return L->size;
}
// cau truc do thi
typedef struct{
	int n; // dinh cua do thi
	List adj[100]; // chua ds cac dinh ke
}Graph;
// khoi tao do thi co n dinh
void init_graph(Graph* G, int n){
	G->n=n;
	int i;
	for(i=1;i<=G->n;i++){
		make_null_list(&G->adj[i]);
	}
}
// them cung vao do thi dung trong truong ho do thi voi huong
void add_edge1(Graph* G, int x, int y){
	push_back(&G->adj[x],y); // y ke voi x
	push_back(&G->adj[y],x); // x ke voi y
}
// them cung dung trong truong hop do thi co huong
void add_edge2(Graph* G, int x, int y){
	push_back(&G->adj[x],y);// chi co y ke voi x
}
// kiem tra dinh y co ke dinh x?
int adjacent(Graph* G, int x, int y){
	int i;
	for(i=1;i<=G->adj[x].size;i++){
		if(element_at(&G->adj[x],i)==y){
			return 1;
		}
	}
	return 0;
}
// danh sach cac dinh ke
List neighbors(Graph* G, int x){
	List list;
	make_null_list(&list);
	int i;
	for(i=1;i<=G->n;i++){
		if(adjacent(G,x,i)){
			push_back(&list,i);
		}
	}
	return list;
}
// bac cua dinh x
int degree(Graph* G, int x){
	return G->adj[x].size;
}
int color[100];
int fail;
void colorize(Graph *G, int x, int c){
	if (color[x]==-1){
		color[x]=c;
		List L = neighbors(G,x);
		int i;
		for(i=1;i<=L.size;i++){
			int y = element_at(&L,i);
			colorize(G,y,!c);
		}
	}
	else {
		if(color[x]!=c)
			fail=1;
	}
} 
int is_bigraph(Graph *G){
	//Khoi tao color chua co dinh nao co mau
	int j;
	for(j=1;j<=G->n;j++)
		color[j]=-1;
	fail=0;
	colorize(G,1,0);//To mau dinh  1 bang mau den
	//Neu khong that bai, G la bigraph
	return !fail;	// neu khac fail thi ham if dong 80 duoc thuc hien
}
int main(){
	Graph G;
	int n,m,u,v,e,i;
	scanf("%d%d",&n,&m);
	init_graph(&G,n);
	for(e=1;e<=m;e++){
		scanf("%d%d",&u,&v);
		add_edge1(&G,u,v);
	}
	if(is_bigraph(&G)){
		for(i=1;i<=G.n;i++)
			if(color[i]==0)
				printf("%d ",i);
		printf("\n");
		for(i=1;i<=G.n;i++)
			if(color[i]!=0)
				printf("%d ",i);		
	}
	else
		printf("IMPOSSIBLE\n");
}
