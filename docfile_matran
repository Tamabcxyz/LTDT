#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>
#include <string.h>
#include <stdbool.h>
#define MAX_VERTICES 100
#define MAX_EDGES 500
typedef struct{
	int A[MAX_VERTICES][MAX_EDGES];
	int n; // n la so dinh
}Graph;
// khoi tao do thi rong
void init_graph(Graph *G, int n){
	G->n=n;
	int i,j;
	for(i=1;i<=G->n;i++){
		for(j=1;j<=G->n;j++){
			G->A[i][j]=0;
		}
	}
}
// them cung vao do thi
// cung e noi 2 dinh x va y e=(x,y)
void add_edge(Graph *G, int x, int y){//
	if(G->A[x][y]==0){
		G->A[x][y]=1;
		G->A[y][x]=1;	//tro nay van chua dung??
	}else{
		G->A[x][y]+=1;
	}
}
// kiem tra dinh y co ke voi x hay ko
int adjacent(Graph *G, int x, int y){
	return G->A[x][y]!=0;
}
// tinh bac cua dinh x
int degree(Graph *G, int x){
	int i,deg=0;
	for(i=1;i<=G->n;i++){
		deg+=G->A[x][i];
	}
	return deg;
}
void hienthi(Graph *G,int n){
	int j,k;
	for(j=1;j<=n;j++){
		for(k=1;k<=n;k++){
			printf("%d ",G->A[j][k]);
		}
		printf("\n");
	}
}

int main(){
	
	Graph G;
	int n,m,i,a,b,j,k;
	FILE *file;
	file=fopen("dt1.txt","r");
	fscanf(file,"%d%d",&n,&m);
	init_graph(&G,n);
	for(i=1;i<=m;i++){
		fscanf(file,"%d%d",&a,&b);
		add_edge(&G,a,b);
	}
	hienthi(&G,n);
}
