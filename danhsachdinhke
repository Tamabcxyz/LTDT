#include <stdio.h>
#include <stdlib.h>
#define MAX_ELEMENTS 100
typedef int ElementType;
typedef struct{
	ElementType data[MAX_ELEMENTS];
	int size;
}List;// cau truc cua danh sach: 1 mang, so phan tu that su cua mang
// tao danh sach rong
void make_null(List* L){
	L->size=0;
}
// them 1 ptu vao cuoi danh sach
void push_back(List* L, ElementType x){
	L->data[L->size]=x;
	L->size++;
}
// lay phan tu tai vi tri i
ElementType element_at(List* L, int i){
	return L->data[i-1];
}
// tra ve so ptu cua danh sach
int count_list(List* L){
	return L->size;
}
typedef struct {
    int A[100][500];
    int n, m;
} Graph;// cau truc do thi ma tran dinh cung
// kiem tra y co noi voi x khong
int adjacent(Graph* G, int x, int y){
	int i;
	for(i=1;i<=G->m;i++){
		if(G->A[x][i]==1&&G->A[y][i]==1){
			return 1;
		}
	}
	return 0;
}
// tim dinh ke voi x
List neighbors(Graph* G, int x){
	int i,j;
	List L;
	make_null(&L);
	for(i=1;i<=G->n;i++){// duyet qua cac dinh
		if(i==x){// neu dinh x trung voi dinh y thi ko xet
			i++;
		}if(adjacent(G,x,i)){// da tung sai tro nay vi co chu else truoc if
			push_back(&L,i);
		}
	}
	return L;
}
void init_graph(Graph* G, int n, int m){
	G->n=n;
	G->m=m;
	int i,j;
	for(i=1;i<=n;i++){
		for(j=1;j<=m;j++){
			G->A[i][j]=0;
		}
	}
}
void add_edge(Graph* G, int e, int x, int y){
	G->A[x][e]=1;
	G->A[y][e]=1;
}
int main(){
	Graph G;
	int n=4, m=5,i,j;
	init_graph(&G,n,m);
	add_edge(&G,1,1,2);
	add_edge(&G,2,1,3);
	add_edge(&G,3,1,4);
	add_edge(&G,4,2,3);
	add_edge(&G,5,1,3);
	for(i=1;i<=n;i++){
		List list=neighbors(&G,i);
		for(j=1;j<=list.size;j++){
			printf("%d ",element_at(&list,j));
		}		
		printf("\n");
		make_null(&list);
	}
	/*List list=neighbors(&G,1);
	for(j=1;j<=list.size;j++){
		printf("%d ",element_at(&list,j));
	}*/
}
