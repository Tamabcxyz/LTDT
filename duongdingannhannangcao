#include<stdio.h>
#define MAX_N 100
#define MAX_M 500
typedef struct{
	int A[MAX_N][MAX_M	];
	int n,m;
}Graph;

//MA TRAN KE 

void init_graph(Graph *pG,int n){
	int i,j;
	pG->n=n;
	for(i=1;i<=pG->n;i++){
		for(j=1;j<=pG->n;j++){
			pG->A[i][j]=0;
		}
	}
}
void add_edge(Graph *pG,int x,int y,int w){
	pG->A[x][y]=w;
	//pG->A[y][x]=w;
}
int degree(Graph *pG,int x){
	int i,deg=0;
	for(i=1;i<=pG->n;i++)
		if(pG->A[x][i]>0) deg++;

		return deg;
}
int adjacent(Graph *pG,int x,int y){
	if(pG->A[x][y]==1) return 1;
	return 0;
}
void neighbours(Graph *pG,int x){
	int i;
	for(i=1;i<=pG->n;i++){
		if(adjacent(pG,x,i)==1)
			printf("%d\t",i);
	}
}

//Tim duong di ngan nhat

#define INFINITY 9999999
#define NO_EDGE -9999
int mark[100],pi[100],p[100];
void Dijkstra(Graph *G,int s){
	int i,j;
	for(i=1;i<=G->n;i++){
		pi[i]=INFINITY;
		mark[i]=0;
	}
	pi[s] = 0;
	p[s] = -1;
	for(i=1;i<=G->n;i++){
		int min_pi=INFINITY;
		for(j=1;j<=G->n;j++)
		if((mark[j]==0) && (pi[j]<min_pi)){
			min_pi=pi[j];
			i=j;
		}
		mark[i]=1;	
		for(j=1;j<=G->n;j++)
		if(G->A[i][j]!=0&& mark[j]==0){
			if(( pi[i] + (G->A[i][j]) )<pi[j]){
				pi[j]= pi[i] + (G->A[i][j]);
				p[j]=i;

			}
		}	

	}
}



int main(){
//	freopen("D:\\vd.txt","r",stdin);
	Graph G;
	int n,m,x,y,w,i,j;
	scanf("%d%d",&n,&m);
	init_graph(&G,n);
	for(i=0;i<m;i++){
		scanf("%d%d%d",&x,&y,&w);
		add_edge(&G,x,y,w);
	}

	int tmp=0;
	Dijkstra(&G,1);

	if(pi[n]==INFINITY) {
		printf("-1 0");
	}
	else{
		for(i=1;i<=G.n;i++)
		if(p[i]==p[n]) tmp++;
		printf("%d %d",pi[n],tmp);

	}
	return 0;
}
